package de.uol.pgdoener.civicsage.business.completion;

import de.uol.pgdoener.civicsage.business.embedding.VectorStoreExtension;
import lombok.Builder;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.jetbrains.annotations.NotNull;
import org.springframework.ai.chat.client.ChatClientRequest;
import org.springframework.ai.chat.client.ChatClientResponse;
import org.springframework.ai.chat.client.advisor.api.AdvisorChain;
import org.springframework.ai.chat.client.advisor.api.BaseAdvisor;
import org.springframework.ai.chat.prompt.Prompt;
import org.springframework.ai.document.Document;

import java.util.List;
import java.util.Map;
import java.util.UUID;

/**
 * This advisor appends the content of the documents with the ids provided in the context to the system prompt.
 * This advisor is added as a default advisor to the {@link org.springframework.ai.chat.client.ChatClient} created
 * in the {@link de.uol.pgdoener.civicsage.config.ChatConfig#documentChatClient()}.
 */
@Slf4j
@Builder
@RequiredArgsConstructor
public class DocumentAdvisor implements BaseAdvisor {

    public static final String DOCUMENT_IDS_CONTEXT_KEY = "document-ids-context";

    private final VectorStoreExtension vectorStoreExtension;

    /**
     * This method is called before the prompt is sent to the model. It retrieves the documents from the vector store
     * and appends them to the system prompt. The string appended is generated by the
     * {@link DocumentAdvisor#createDocumentText(List)} method.
     *
     * @param chatClientRequest the request before the advisor acted
     * @param advisorChain      the advisor chain this advisor is in
     * @return the new request for the chat model with additional context
     */
    @NotNull
    @Override
    public ChatClientRequest before(@NotNull ChatClientRequest chatClientRequest, @NotNull AdvisorChain advisorChain) {
        Prompt prompt = chatClientRequest.prompt();
        Map<String, Object> context = chatClientRequest.context();
        @SuppressWarnings("unchecked")
        List<UUID> documentIds = (List<UUID>) context.get(DOCUMENT_IDS_CONTEXT_KEY);

        if (documentIds.isEmpty()) {
            log.info("No documents provided");
            return chatClientRequest;
        }

        List<Document> documents = vectorStoreExtension.getById(documentIds);
        String documentsText = createDocumentText(documents);

        prompt = prompt.augmentSystemMessage(systemMessage -> {
            String systemMessageText = systemMessage.getText();
            systemMessageText += documentsText;
            return systemMessage.mutate().text(systemMessageText).build();
        });

        log.info("Adding contents of documents to prompt");
        return new ChatClientRequest(prompt, context);
    }

    /**
     * This method concatenates the contents of the document to be provided to the chat model as context.
     *
     * @param documents the documents to add
     * @return a string containing context for the chat model
     */
    private String createDocumentText(List<Document> documents) {
        return documents.stream()
                .map(Document::getText)
                .reduce("", (current, d) -> current + d + "\n");
    }

    @NotNull
    @Override
    public ChatClientResponse after(@NotNull ChatClientResponse chatClientResponse, @NotNull AdvisorChain advisorChain) {
        return chatClientResponse;
    }

    @Override
    public int getOrder() {
        return 0;
    }

}
